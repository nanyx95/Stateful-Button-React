{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stateful-button",
  "type": "registry:component",
  "title": "Stateful Button",
  "author": "Fabio Somaglia",
  "description": "Stateful Button description.",
  "dependencies": [
    "xstate",
    "@xstate/react",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "progress"
  ],
  "files": [
    {
      "path": "registry/new-york/ui/stateful-button/stateful-button.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Check, X, LoaderCircle } from 'lucide-react';\nimport { statefulButtonMachine } from '@/registry/new-york/ui/stateful-button/stateful-button-machine';\nimport { useMachine } from '@xstate/react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\nimport { motion, AnimatePresence, useReducedMotion, type Transition } from 'motion/react';\n\n/**\n * CVA variants for the underlying button element.\n */\nconst buttonVariants = cva(\n\t'w-25 gap-1 relative overflow-hidden disabled:pointer-events-auto disabled:cursor-not-allowed disabled:opacity-100',\n\t{\n\t\tvariants: {\n\t\t\tsize: {\n\t\t\t\tdefault: 'h-9 px-3.5 py-2 has-[>svg]:px-3',\n\t\t\t\tsm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\n\t\t\t\tlg: 'h-10 rounded-md px-4.5 has-[>svg]:px-4'\n\t\t\t}\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tsize: 'default'\n\t\t}\n\t}\n);\n\n/**\n * CVA variants for the progress indicator.\n */\nconst progressVariants = cva('', {\n\tvariants: {\n\t\tvariant: {\n\t\t\tdefault:\n\t\t\t\t'bg-neutral-50/20 dark:bg-neutral-900/20 [&>[data-slot=progress-indicator]]:bg-neutral-50 [&>[data-slot=progress-indicator]]:dark:bg-neutral-900',\n\t\t\tdestructive:\n\t\t\t\t'bg-neutral-900/20 dark:bg-neutral-50/20 [&>[data-slot=progress-indicator]]:bg-neutral-900 [&>[data-slot=progress-indicator]]:dark:bg-neutral-50',\n\t\t\toutline:\n\t\t\t\t'bg-neutral-900/20 dark:bg-neutral-50/20 [&>[data-slot=progress-indicator]]:bg-neutral-900 [&>[data-slot=progress-indicator]]:dark:bg-neutral-50',\n\t\t\tsecondary:\n\t\t\t\t'bg-neutral-900/20 dark:bg-neutral-50/20 [&>[data-slot=progress-indicator]]:bg-neutral-900 [&>[data-slot=progress-indicator]]:dark:bg-neutral-50',\n\t\t\tghost:\n\t\t\t\t'bg-neutral-900/20 dark:bg-neutral-50/20 [&>[data-slot=progress-indicator]]:bg-neutral-900 [&>[data-slot=progress-indicator]]:dark:bg-neutral-50'\n\t\t}\n\t},\n\tdefaultVariants: {\n\t\tvariant: 'default'\n\t}\n});\n\n/**\n * Accessible ARIA messages for different states of the stateful button.\n *\n * @remarks\n * If not provided, sensible defaults are used.\n */\ntype AriaMessages = {\n\t/**\n\t * Message announced while indeterminate work is in progress.\n\t *\n\t * @defaultValue `'Loading, please wait'`\n\t */\n\tloading?: string;\n\t/**\n\t * Function that generates a progress message.\n\t *\n\t * @param value - The current progress value.\n\t * @returns An accessible description of the progress.\n\t *\n\t * @defaultValue Rounds to nearest 25% (e.g., `\"50%\"`).\n\t */\n\tprogress?: (value: number) => string;\n\t/**\n\t * Message announced when the action completes successfully.\n\t *\n\t * @defaultValue `'Completed successfully'`\n\t */\n\tsuccess?: string;\n\t/**\n\t * Message announced when an error occurs.\n\t *\n\t * @defaultValue `'An error occurred'`\n\t */\n\terror?: string;\n};\n\n/**\n * Shared props for the {@link StatefulButton} component.\n *\n * @remarks\n * Extends native `button` element props, supports style variants\n * from CVA, and accessibility messages.\n */\ntype BaseProps = {\n\t/**\n\t * Click handler invoked when the button is pressed.\n\t *\n\t * @param event - The click event object.\n\t * @returns Can return a `Promise` if the click handler is asynchronous.\n\t */\n\tonClick?: (event: React.MouseEvent<HTMLButtonElement>) => void | Promise<unknown>;\n\t/**\n\t * Callback triggered when the action completes successfully.\n\t *\n\t * @remarks\n\t * This callback is invoked by the {@link statefulButtonMachine} `onComplete` action.\n\t */\n\tonComplete?: () => void;\n\t/**\n\t * Callback triggered when when `onClick` throws (or a rejection occurs).\n\t *\n\t * @param error - The error object.\n\t */\n\tonError?: (error: Error) => void;\n\t/**\n\t * Content to render inside the button while in the `idle` state.\n\t */\n\tchildren?: React.ReactNode;\n\t/**\n\t * Customizable ARIA messages for accessibility.\n\t * Defaults are provided if not supplied.\n\t */\n\tariaMessages?: AriaMessages;\n} & React.ButtonHTMLAttributes<HTMLButtonElement> &\n\tVariantProps<typeof buttonVariants> &\n\tVariantProps<typeof progressVariants>;\n\n/**\n * Props for the spinner-style {@link StatefulButton}.\n *\n * @remarks\n * This is the **default** mode. When the `onClick` handler is executed,\n * the button enters a `loading` state, displaying a spinner icon until the\n * promise returned by `onClick` resolves, rejects, or throws.\n */\ntype SpinnerButtonProps = {\n\t/**\n\t * Specifies the spinner button type.\n\t *\n\t * @defaultValue `'spinner'`\n\t */\n\tbuttonType?: 'spinner';\n\t/**\n\t * The progress prop is not applicable to the spinner button type.\n\t */\n\tprogress?: never;\n};\n\n/**\n * Props for the progress-bar-style {@link StatefulButton}.\n *\n * @remarks\n * In this mode, the button displays a progress bar that reflects the value\n * of the `progress` prop. This is useful for showing the status of an\n * ongoing task, like a file upload. The `progress` prop must be a\n * controlled value between 0 and 100.\n */\ntype ProgressButtonProps = {\n\t/**\n\t * Specifies the progress button type. Must be 'progress'.\n\t */\n\tbuttonType: 'progress';\n\t/**\n\t * The current progress value (0-100). This is a controlled prop used\n\t * to update the progress bar.\n\t */\n\tprogress: number;\n};\n\n/**\n * Props for the {@link StatefulButton} component.\n *\n * The button's behavior and available props depend on the `buttonType` specified.\n *\n * @see {@link SpinnerButtonProps} for the default spinner mode.\n * @see {@link ProgressButtonProps} for the progress bar mode.\n */\nexport type StatefulButtonProps = BaseProps & (SpinnerButtonProps | ProgressButtonProps);\n\n/**\n * A stateful button that provides visual feedback for different states, such as\n * idle, loading/progress, success, and error.\n *\n * @remarks\n * The button can operate in two main modes, determined by the `buttonType` prop:\n * 1.  **`spinner` (default):** Displays a spinner during an asynchronous\n *     operation. The button transitions to a loading state on click and waits\n *     for the `onClick` promise to resolve.\n * 2.  **`progress`:** Displays a progress bar controlled by the `progress` prop.\n *     This is ideal for tasks like file uploads where progress can be tracked\n *     incrementally.\n *\n * The button's visual appearance (variant and size) and other native button\n * attributes can be customized.\n *\n * @param props - {@link StatefulButtonProps} controlling behavior and appearance.\n * @returns A React element representing the stateful button.\n *\n * @defaultValue `buttonType` defaults to `'spinner'`.\n *\n * @example Spinner Mode (Default)\n *\n * Displays a spinner during an async operation.\n *\n * ```tsx\n * <StatefulButton\n *   onClick={async () => {\n *     // Simulate an API call\n *     await new Promise(resolve => setTimeout(resolve, 2000));\n *   }}\n * >\n *   Save\n * </StatefulButton>\n * ```\n *\n * @example Progress Mode\n *\n * Displays a progress bar controlled by the `progress` prop, often updated\n * during an async operation.\n *\n * ```tsx\n * const [progress, setProgress] = React.useState(0);\n *\n * // Simulate an async upload process\n * const handleUpload = async () => {\n *   for (let i = 0; i <= 10; i++) {\n *     await new Promise(resolve => setTimeout(resolve, 300));\n *     setProgress(i * 10);\n *   }\n * };\n *\n * <StatefulButton\n *   buttonType=\"progress\"\n *   progress={progress}\n *   onClick={handleUpload}\n *   onComplete={() => console.log('Upload complete!')}\n * >\n *   Upload\n * </StatefulButton>\n * ```\n */\nconst StatefulButton: React.FC<StatefulButtonProps> = ({\n\tbuttonType = 'spinner',\n\tonClick,\n\tonComplete,\n\tonError,\n\tprogress,\n\tchildren,\n\tclassName,\n\tvariant,\n\tsize,\n\tariaMessages,\n\t...props\n}) => {\n\tconst [snapshot, send] = useMachine(statefulButtonMachine, {\n\t\tinput: {\n\t\t\tonComplete,\n\t\t\tbuttonType\n\t\t}\n\t});\n\n\tconst shouldReduceMotion = useReducedMotion();\n\n\tReact.useEffect(() => {\n\t\tif (buttonType === 'progress' && typeof progress === 'number') {\n\t\t\tsend({ type: 'updateProgress', progress });\n\t\t}\n\t}, [progress]);\n\n\t/**\n\t * Click handler that:\n\t * - sends `click` to the machine to transition into loading/progress,\n\t * - awaits the `onClick` handler if it returns a promise (spinner mode),\n\t * - dispatches `finishLoading` when spinner promise resolves,\n\t * - catches errors, forwards them to `onError` and transitions the machine to `error`.\n\t *\n\t * @param event - The click event from the button element.\n\t *\n\t * @throws Rethrows or forwards thrown values to `onError` as `Error` objects.\n\t *\n\t * @remarks\n\t * In spinner mode, success is signaled via `finishLoading`.\n\t * In progress mode, success is driven externally via `progress >= 100`.\n\t */\n\tconst handleClick = async (event: React.MouseEvent<HTMLButtonElement>) => {\n\t\tsend({ type: 'click' });\n\t\ttry {\n\t\t\tawait onClick?.(event);\n\t\t\tif (buttonType === 'spinner') {\n\t\t\t\tsend({ type: 'finishLoading' });\n\t\t\t}\n\t\t} catch (error: unknown) {\n\t\t\tconst err = error instanceof Error ? error : new Error(String(error));\n\t\t\tonError?.(err);\n\t\t\tsend({ type: 'error' });\n\t\t}\n\t};\n\n\t/**\n\t * Default ARIA messages used if {@link AriaMessages} are not provided.\n\t */\n\tconst defaultAriaMessages: Required<AriaMessages> = {\n\t\tloading: 'Loading, please wait',\n\t\tprogress: (value: number) => {\n\t\t\tconst roundedValue = Math.round(value / 25) * 25;\n\t\t\treturn `${roundedValue}%`;\n\t\t},\n\t\tsuccess: 'Completed successfully',\n\t\terror: 'An error occurred'\n\t};\n\tconst ariaMsg = { ...defaultAriaMessages, ...ariaMessages };\n\n\tconst loadingContent = (\n\t\t<>\n\t\t\t<LoaderCircle className=\"animate-spin\" aria-hidden=\"true\" />\n\t\t\t<span className=\"sr-only\">{ariaMsg.loading}</span>\n\t\t</>\n\t);\n\tconst progressContent = (\n\t\t<>\n\t\t\t<Progress value={snapshot.context.progress} className={cn(progressVariants({ variant }))} />\n\t\t\t<span className=\"sr-only\">{ariaMsg.progress(snapshot.context.progress)}</span>\n\t\t</>\n\t);\n\tconst successContent = (\n\t\t<>\n\t\t\t<Check aria-hidden=\"true\" />\n\t\t\t<span role=\"status\" className=\"sr-only\">\n\t\t\t\t{ariaMsg.success}\n\t\t\t</span>\n\t\t</>\n\t);\n\tconst errorContent = (\n\t\t<>\n\t\t\t<X aria-hidden=\"true\" />\n\t\t\t<span role=\"status\" className=\"sr-only\">\n\t\t\t\t{ariaMsg.error}\n\t\t\t</span>\n\t\t</>\n\t);\n\n\tconst slideTransition: Transition = { duration: shouldReduceMotion ? 0.1 : 0.2, ease: 'easeOut' };\n\tconst fadeTransition: Transition = { duration: shouldReduceMotion ? 0.05 : 0.15, ease: 'linear' };\n\tconst reducedY = shouldReduceMotion ? 20 : 80;\n\n\treturn (\n\t\t<Button\n\t\t\tvariant={variant}\n\t\t\tclassName={cn(buttonVariants({ size, className }))}\n\t\t\tonClick={handleClick}\n\t\t\tdisabled={!snapshot.matches('idle')}\n\t\t\taria-busy={snapshot.matches('loading') || snapshot.matches('progress')}\n\t\t\taria-live=\"polite\"\n\t\t\t{...props}\n\t\t>\n\t\t\t<AnimatePresence mode=\"wait\" initial={false}>\n\t\t\t\t{snapshot.matches('idle') && (\n\t\t\t\t\t<motion.div\n\t\t\t\t\t\tkey=\"idle\"\n\t\t\t\t\t\tinitial={{ y: `-${reducedY}%`, opacity: 0 }}\n\t\t\t\t\t\tanimate={{ y: 0, opacity: 1 }}\n\t\t\t\t\t\texit={{ y: `-${reducedY}%`, opacity: 0 }}\n\t\t\t\t\t\ttransition={slideTransition}\n\t\t\t\t\t\tclassName=\"flex items-center gap-1\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</motion.div>\n\t\t\t\t)}\n\n\t\t\t\t{snapshot.matches('loading') && (\n\t\t\t\t\t<motion.div\n\t\t\t\t\t\tkey=\"loading\"\n\t\t\t\t\t\tinitial={{ y: `${reducedY}%`, opacity: 0 }}\n\t\t\t\t\t\tanimate={{ y: 0, opacity: 1 }}\n\t\t\t\t\t\texit={{ opacity: 0 }}\n\t\t\t\t\t\ttransition={slideTransition}\n\t\t\t\t\t\tclassName=\"flex items-center gap-1\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{loadingContent}\n\t\t\t\t\t</motion.div>\n\t\t\t\t)}\n\n\t\t\t\t{snapshot.matches('progress') && (\n\t\t\t\t\t<motion.div\n\t\t\t\t\t\tkey=\"progress\"\n\t\t\t\t\t\tinitial={{ y: `${reducedY}%`, opacity: 0 }}\n\t\t\t\t\t\tanimate={{ y: 0, opacity: 1 }}\n\t\t\t\t\t\texit={{ opacity: 0 }}\n\t\t\t\t\t\ttransition={slideTransition}\n\t\t\t\t\t\tclassName=\"flex w-full items-center gap-1\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{progressContent}\n\t\t\t\t\t</motion.div>\n\t\t\t\t)}\n\n\t\t\t\t{snapshot.matches('success') && (\n\t\t\t\t\t<motion.div\n\t\t\t\t\t\tkey=\"success\"\n\t\t\t\t\t\tinitial={{ opacity: 0 }}\n\t\t\t\t\t\tanimate={{ opacity: 1 }}\n\t\t\t\t\t\texit={{ y: `${reducedY}%`, opacity: 0 }}\n\t\t\t\t\t\ttransition={fadeTransition}\n\t\t\t\t\t\tclassName=\"flex items-center gap-1\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{successContent}\n\t\t\t\t\t</motion.div>\n\t\t\t\t)}\n\n\t\t\t\t{snapshot.matches('error') && (\n\t\t\t\t\t<motion.div\n\t\t\t\t\t\tkey=\"error\"\n\t\t\t\t\t\tinitial={{ opacity: 0 }}\n\t\t\t\t\t\tanimate={{ opacity: 1 }}\n\t\t\t\t\t\texit={{ y: `${reducedY}%`, opacity: 0 }}\n\t\t\t\t\t\ttransition={fadeTransition}\n\t\t\t\t\t\tclassName=\"flex items-center gap-1\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{errorContent}\n\t\t\t\t\t</motion.div>\n\t\t\t\t)}\n\t\t\t</AnimatePresence>\n\t\t</Button>\n\t);\n};\n\nexport default StatefulButton;\n",
      "type": "registry:ui",
      "target": "components/ui/stateful-button.tsx"
    },
    {
      "path": "registry/new-york/ui/stateful-button/stateful-button-machine.ts",
      "content": "import { assign, setup } from 'xstate';\n\nconst SUCCESS_TO_IDLE_DELAY = 1500;\nconst ERROR_TO_IDLE_DELAY = 1500;\n\n/**\n * A finite state machine that manages the state of a stateful button.\n *\n * @remarks\n * The machine has the following states:\n * - `idle`: Waiting for user interaction.\n * - `loading`: Shows a spinner while asynchronous work is in progress.\n * - `progress`: Shows a progress bar, typically when progress percentage is known.\n * - `success`: Temporary success state, then resets back to idle.\n * - `error`: Temporary error state, then resets back to idle.\n *\n * @privateRemarks\n * Built with XState and used internally by {@link StatefulButton}.\n */\nconst statefulButtonMachine = setup({\n\ttypes: {\n\t\tcontext: {} as {\n\t\t\tprogress: number;\n\t\t\tonComplete?: () => void;\n\t\t\tbuttonType: 'spinner' | 'progress';\n\t\t},\n\t\tinput: {} as {\n\t\t\tonComplete?: () => void;\n\t\t\tbuttonType: 'spinner' | 'progress';\n\t\t},\n\t\tevents: {} as\n\t\t\t| { type: 'click' }\n\t\t\t| { type: 'updateProgress'; progress: number }\n\t\t\t| { type: 'finishLoading' }\n\t\t\t| { type: 'error' }\n\t},\n\tactions: {\n\t\tcallOnComplete: ({ context }) => context.onComplete?.(),\n\t\tsetProgress: assign(({ event }) => (event.type === 'updateProgress' ? { progress: event.progress } : {})),\n\t\tresetProgress: assign({ progress: 0 })\n\t},\n\tguards: {\n\t\tisSpinner: ({ context }) => context.buttonType === 'spinner',\n\t\tisProgress: ({ context }) => context.buttonType === 'progress',\n\t\tisProgressComplete: ({ event }) => event.type === 'updateProgress' && event.progress >= 100\n\t}\n}).createMachine({\n\tid: 'statefulButton',\n\tcontext: ({ input }) => ({\n\t\tprogress: 0,\n\t\tonComplete: input.onComplete,\n\t\tbuttonType: input.buttonType\n\t}),\n\tinitial: 'idle',\n\tstates: {\n\t\tidle: {\n\t\t\ton: {\n\t\t\t\tclick: [\n\t\t\t\t\t{ target: 'loading', guard: 'isSpinner' },\n\t\t\t\t\t{ target: 'progress', guard: 'isProgress' }\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\tloading: {\n\t\t\ton: {\n\t\t\t\tfinishLoading: { target: 'success' },\n\t\t\t\terror: { target: 'error' }\n\t\t\t}\n\t\t},\n\t\tprogress: {\n\t\t\ton: {\n\t\t\t\tupdateProgress: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: 'success',\n\t\t\t\t\t\tguard: 'isProgressComplete',\n\t\t\t\t\t\tactions: ['setProgress']\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tactions: ['setProgress']\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\terror: { target: 'error' }\n\t\t\t}\n\t\t},\n\t\tsuccess: {\n\t\t\tentry: [{ type: 'callOnComplete' }],\n\t\t\tafter: {\n\t\t\t\t[SUCCESS_TO_IDLE_DELAY]: {\n\t\t\t\t\ttarget: 'idle',\n\t\t\t\t\tactions: ['resetProgress']\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\terror: {\n\t\t\tafter: {\n\t\t\t\t[ERROR_TO_IDLE_DELAY]: {\n\t\t\t\t\ttarget: 'idle',\n\t\t\t\t\tactions: ['resetProgress']\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\nexport { statefulButtonMachine };\n",
      "type": "registry:lib"
    }
  ]
}
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stateful-button",
  "type": "registry:component",
  "title": "Stateful Button",
  "author": "Fabio Somaglia",
  "description": "Stateful Button description.",
  "dependencies": [
    "xstate",
    "@xstate/react"
  ],
  "registryDependencies": [
    "button",
    "progress"
  ],
  "files": [
    {
      "path": "registry/new-york/ui/stateful-button/stateful-button.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Check, X, LoaderCircle } from 'lucide-react';\nimport { assign, setup } from 'xstate';\nimport { useMachine } from '@xstate/react';\n\nconst statefulButtonMachine = setup({\n\ttypes: {\n\t\tcontext: {} as {\n\t\t\tprogress: number;\n\t\t\tonComplete?: () => void;\n\t\t\tbuttonType: 'spinner' | 'progress';\n\t\t},\n\t\tinput: {} as {\n\t\t\tonComplete?: () => void;\n\t\t\tbuttonType: 'spinner' | 'progress';\n\t\t},\n\t\tevents: {} as\n\t\t\t| { type: 'click' }\n\t\t\t| { type: 'setProgress'; progress: number }\n\t\t\t| { type: 'finishLoading' }\n\t\t\t| { type: 'error' }\n\t},\n\tactions: {\n\t\tonComplete: ({ context }) => {\n\t\t\tcontext.onComplete?.();\n\t\t}\n\t},\n\tguards: {\n\t\tisSpinner: ({ context }) => context.buttonType === 'spinner',\n\t\tisProgress: ({ context }) => context.buttonType === 'progress'\n\t}\n}).createMachine({\n\tid: 'statefulButton',\n\tcontext: ({ input }) => ({\n\t\tprogress: 0,\n\t\tonComplete: input.onComplete,\n\t\tbuttonType: input.buttonType\n\t}),\n\tinitial: 'idle',\n\tstates: {\n\t\tidle: {\n\t\t\ton: {\n\t\t\t\tclick: [\n\t\t\t\t\t{ target: 'loading', guard: 'isSpinner' },\n\t\t\t\t\t{ target: 'progress', guard: 'isProgress' }\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\tloading: {\n\t\t\ton: {\n\t\t\t\tfinishLoading: { target: 'success' },\n\t\t\t\terror: { target: 'error' }\n\t\t\t}\n\t\t},\n\t\tprogress: {\n\t\t\ton: {\n\t\t\t\tsetProgress: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: 'success',\n\t\t\t\t\t\tguard: ({ event }) => event.progress >= 100,\n\t\t\t\t\t\tactions: assign({\n\t\t\t\t\t\t\tprogress: ({ event }) => event.progress\n\t\t\t\t\t\t})\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tactions: assign({\n\t\t\t\t\t\t\tprogress: ({ event }) => event.progress\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\terror: { target: 'error' }\n\t\t\t}\n\t\t},\n\t\tsuccess: {\n\t\t\tentry: 'onComplete',\n\t\t\tafter: {\n\t\t\t\t1500: {\n\t\t\t\t\ttarget: 'idle',\n\t\t\t\t\tactions: assign({ progress: 0 })\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\terror: {\n\t\t\tafter: {\n\t\t\t\t1500: {\n\t\t\t\t\ttarget: 'idle',\n\t\t\t\t\tactions: assign({ progress: 0 })\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\ntype BaseProps = {\n\tonClick?: (event: React.MouseEvent<HTMLButtonElement>) => void | Promise<unknown>;\n\tonComplete?: () => void;\n\tonError?: (error: Error) => void;\n\tchildren?: React.ReactNode;\n} & React.ButtonHTMLAttributes<HTMLButtonElement>;\n\ntype SpinnerButtonProps = BaseProps & {\n\tbuttonType?: 'spinner';\n\tprogress?: never;\n};\n\ntype ProgressButtonProps = BaseProps & {\n\tbuttonType: 'progress';\n\tprogress: number;\n};\n\nexport type StatefulButtonProps = BaseProps & (SpinnerButtonProps | ProgressButtonProps);\n\nconst StatefulButton: React.FC<StatefulButtonProps> = ({\n\tbuttonType = 'spinner',\n\tonClick,\n\tonComplete,\n\tonError,\n\tprogress,\n\tchildren,\n\t...props\n}) => {\n\tconst [snapshot, send] = useMachine(statefulButtonMachine, {\n\t\tinput: {\n\t\t\tonComplete,\n\t\t\tbuttonType\n\t\t}\n\t});\n\n\tReact.useEffect(() => {\n\t\tif (buttonType === 'progress' && typeof progress === 'number') {\n\t\t\tsend({ type: 'setProgress', progress });\n\t\t}\n\t}, [progress]);\n\n\tconst handleClick = async (event: React.MouseEvent<HTMLButtonElement>) => {\n\t\tsend({ type: 'click' });\n\t\ttry {\n\t\t\tawait onClick?.(event);\n\t\t\tif (buttonType === 'spinner') {\n\t\t\t\tsend({ type: 'finishLoading' });\n\t\t\t}\n\t\t} catch (error: unknown) {\n\t\t\tconst err = error instanceof Error ? error : new Error(String(error));\n\t\t\tonError?.(err);\n\t\t\tsend({ type: 'error' });\n\t\t}\n\t};\n\n\treturn (\n\t\t<Button onClick={handleClick} disabled={!snapshot.matches('idle')} className=\"w-24\" {...props}>\n\t\t\t{snapshot.matches('idle') && children}\n\t\t\t{snapshot.matches('loading') && <LoaderCircle className=\"animate-spin\" />}\n\t\t\t{snapshot.matches('progress') && (\n\t\t\t\t<Progress\n\t\t\t\t\tvalue={snapshot.context.progress}\n\t\t\t\t\tclassName=\"bg-neutral-50/20 dark:bg-neutral-900/20 [&>[data-slot=progress-indicator]]:bg-neutral-50 [&>[data-slot=progress-indicator]]:dark:bg-neutral-900\"\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t{snapshot.matches('success') && <Check />}\n\t\t\t{snapshot.matches('error') && <X />}\n\t\t</Button>\n\t);\n};\n\nexport default StatefulButton;\n",
      "type": "registry:component",
      "target": "~/components/ui/stateful-button.tsx"
    }
  ]
}